all: emulator

common      := $(srcDir)/emulator/common
install     := $(srcDir)/install

ELF         := elf2hex

# pipe processor output through the spike-dasm program to turn 
# raw instruction bits into pretty, readable diassembly
disasm_exe := 2>
which_disasm := $(shell which spike-dasm)
ifneq ($(which_disasm),)
	disasm_exe := 3>&1 1>&2 2>&3 | $(which_disasm) $(DISASM_EXTENSION) >
endif
 

MODEL := Top

seed=
MK_TARGET_PROC?=rv32_1stage

 
#choose between 32b anad 64b binaries, using proxy-kernel 
RV64_MODE?="false"
SUPERVISOR_MODE?="false"
 
 
#riscv-pk is relative to top of sodor
#pk_hex is relative to emulator/proc directory
RISCV_PK:= $(installTop)/riscv-pk/target/bin/pk
PK_HEX  := $(addsuffix .hex,$(RISCV_PK))

# Allow us to use different Tracer modules for each processor
TRACERPATH?=$(common)
TRACER?=tracer
BP?=bp
BPPATH?=$(common)

CXXFLAGS := $(CXXFLAGS) -O1 -std=c++11  -g

CXXSRCS := disasm htif_emulator
CXXFLAGS := $(CXXFLAGS) -I$(srcDir)/emulator/common -I$(buildIncludeDir)
CXXDEBUGFLAGS := -DDEBUG

LDFLAGS := $(LDFLAGS) -L$(buildLibDir) -Wl,-rpath,$(buildLibDir) -L. -lfesvr -lpthread

OBJS := $(addsuffix .o,$(CXXSRCS) $(MODEL) $(TRACER) $(BP))
DEBUG_OBJS := $(addsuffix -debug.o,$(CXXSRCS) $(MODEL) $(TRACER) $(BP))

CHISEL_ARGS := --noIoDebug --wio --backend c --debug --ioDebug --compileInitializationUnoptimized --W0W --targetDir emulator/${MK_TARGET_PROC}/generated-src
CHISEL_ARGS_DEBUG := $(CHISEL_ARGS)-debug --debug --vcd --ioDebug

# To find emulator.cpp
vpath %.cpp  $(srcDir)/emulator/$(MK_TARGET_PROC)
vpath %.a    $(buildLibDir)

generated-src/$(MODEL).cpp: $(srcDir)/src/main/scala/${MK_TARGET_PROC}/*.scala $(srcDir)/src/main/scala/common/*.scala
	cd $(buildDir) && $(SBT) "project ${MK_TARGET_PROC}" "run $(CHISEL_ARGS)"

generated-src-debug/$(MODEL).cpp: $(srcDir)/src/${MK_TARGET_PROC}/*.scala $(srcDir)/src/common/*.scala
	cd $(buildDir) && $(SBT) "project ${MK_TARGET_PROC}" "run $(CHISEL_ARGS_DEBUG)"

$(MODEL).o: %.o: generated-src/%.cpp
	$(MAKE) -j $(patsubst %.cpp,%.o,$(shell ls generated-src/$(MODEL)-*.cpp))
	$(LD) -r $(patsubst %.cpp,%.o,$(shell ls generated-src/$(MODEL)-*.cpp)) -o $@

$(MODEL)-debug.o: %-debug.o: generated-src-debug/%.cpp
	$(MAKE) -j $(patsubst %.cpp,%.o,$(shell ls generated-src-debug/$(MODEL)-*.cpp))
	$(LD) -r $(patsubst %.cpp,%.o,$(shell ls generated-src-debug/$(MODEL)-*.cpp)) -o $@

$(addsuffix .o,$(CXXSRCS)): %.o: $(srcDir)/emulator/common/%.cc $(srcDir)/emulator/common/*.h generated-src/$(MODEL).cpp
	$(CXX) $(CXXFLAGS) -Igenerated-src -c -o $@ $<

$(addsuffix -debug.o,$(CXXSRCS)): %-debug.o: $(srcDir)/emulator/common/%.cc $(srcDir)/emulator/common/*.h generated-src-debug/$(MODEL).cpp
	$(CXX) $(CXXFLAGS) -Igenerated-src-debug -c -o $@ $<
 
$(TRACER).o: $(TRACERPATH)/$(TRACER).h $(TRACERPATH)/$(TRACER).cpp generated-src/Top.h
	$(CXX) -c $(CXXFLAGS) $(TRACERPATH)/$(TRACER).cpp -I$(common) -I./generated-src -o $(TRACER).o
 
$(TRACER)-debug.o: $(TRACERPATH)/$(TRACER).h $(TRACERPATH)/$(TRACER).cpp generated-src-debug/Top.h
	$(CXX) -c $(CXXFLAGS) $(TRACERPATH)/$(TRACER).cpp -I$(common) -I./generated-src-debug -o $(TRACER)-debug.o

$(BP).o: $(BPPATH)/$(BP).h $(BPPATH)/$(BP).cpp generated-src/Top.h
	$(CXX) -c $(CXXFLAGS) $(BPPATH)/$(BP).cpp -I$(common) -I./generated-src -o $(BP).o
 
$(BP)-debug.o: $(BPPATH)/$(BP).h $(BPPATH)/$(BP).cpp generated-src-debug/Top.h
	$(CXX) -c $(CXXFLAGS) $(BPPATH)/$(BP).cpp -I$(common) -I./generated-src-debug -o $(BP)-debug.o


emulator.o: emulator.cpp generated-src/Top.h
	$(CXX) -c $(CXXFLAGS) $< -I$(common) -I./generated-src -o $@

emulator-debug.o: emulator.cpp generated-src-debug/Top.h
	$(CXX) -c $(CXXFLAGS) $(CXXDEBUGFLAGS) $< -I$(common) -I./generated-src-debug -o $@

emulator: $(OBJS) emulator.o
	$(CXX) $(CXXFLAGS) -o $@ $(OBJS) emulator.o $(LDFLAGS)

emulator-debug: $(DEBUG_OBJS) emulator-debug.o
	$(CXX) $(CXXFLAGS) -o $@ $(DEBUG_OBJS) emulator-debug.o $(LDFLAGS)
 
clean:
	rm -rf *.o *.a emulator emulator-debug generated-src generated-src-debug DVEfiles output

clean-tests:
	rm -rf output/*.out

test:
	cd $(buildDir) && $(SBT) "project ${MK_TARGET_PROC}" "~make $(CURDIR) run-fast $(CHISEL_ARGS)"


#--------------------------------------------------------------------
# Tests
#--------------------------------------------------------------------


# Globally installed assembly tests
global_tstdir = $(install)/riscv-tests

global_asm_tests += \
	rv32ui-p-simple \
	rv32ui-p-add \
	rv32ui-p-addi \
	rv32ui-p-auipc \
	rv32ui-p-fence_i \
	rv32ui-p-sb \
	rv32ui-p-sh \
	rv32ui-p-sw \
	rv32ui-p-and \
	rv32ui-p-andi \
	rv32ui-p-beq \
	rv32ui-p-bge \
	rv32ui-p-bgeu \
	rv32ui-p-blt \
	rv32ui-p-bltu \
	rv32ui-p-bne \
	rv32ui-p-j \
	rv32ui-p-jal \
	rv32ui-p-jalr \
	rv32ui-p-lb \
	rv32ui-p-lbu \
	rv32ui-p-lh \
	rv32ui-p-lhu \
	rv32ui-p-lui \
	rv32ui-p-lw \
	rv32ui-p-or \
	rv32ui-p-ori \
	rv32ui-p-sll \
	rv32ui-p-slli \
	rv32ui-p-slt \
	rv32ui-p-slti \
	rv32ui-p-sra \
	rv32ui-p-srai \
	rv32ui-p-sub \
	rv32ui-p-xor \
	rv32ui-p-xori \
	rv32mi-p-sbreak \
	rv32mi-p-scall \

# wait for Privileged v1.8 to add M-level timers
#	rv32mi-p-timer \
# need to add support for ma exceptions
#	rv32mi-p-ma_addr \
	rv32mi-p-ma_fetch \

	# Local assembly tests
local_tstdir = ../../test/riscv-tests

local_asm_tests := \
	$(local_asm_tests)
	#append any tests set by individual processors

# Globally installed benchmarks
global_bmarkdir = $(install)/riscv-bmarks
global_bmarks = \
	median \
	multiply \
	qsort \
	towers \
	vvadd \
	dhrystone

# Local benchmarks
local_bmarkdir = ../../test/riscv-bmarks
local_bmarks = \


#--------------------------------------------------------------------
# Run assembly tests and benchmarks
#--------------------------------------------------------------------
    
global_bmarks_out = $(addsuffix .riscv.out, $(global_bmarks))
global_bmarks_outgz = $(addsuffix .riscv.out.gz, $(global_bmarks))
global_bmarks_vpd = $(addsuffix .riscv.vpd, $(global_bmarks))

asm_test_timeout ?=30000
bmark_timeout ?=1000000
                           
# allow some processors to override testmod when running benchmarks
filetype=riscv.hex
PK_PATH=
ifeq ($(SUPERVISOR_MODE),"true")
ifeq ($(RV64_MODE),"false")
	filetype=rv32s
	PK_PATH=PATH=$(install)/riscv-pk/bin:$(PATH);
else
	filetype=rv64s
	PK_PATH=RISCV=$(install)/riscv-pk64/;
	#$(install)/riscv-pk64/bin:$(PATH);
endif
else
ifeq ($(RV64_MODE),"false")
	filetype=riscv.hex
else
	filetype=rv64u
endif
endif
 
%pk.hex: %pk
	$(ELF) 16 16384 $< > $@

%.hex: 
	$(MAKE) -C $(dir $@) $(notdir $@)

%.riscv.hex: %
	$(MAKE) -C $(dir $@) $(notdir $@)

$(addprefix output/, $(addsuffix .hex, $(global_asm_tests))): output/%.hex: $(global_tstdir)/%.hex
	mkdir -p output
	ln -fs $< $@

$(addprefix output/, $(addsuffix .hex, $(global_bmarks))): output/%.hex: $(global_bmarkdir)/%.riscv.hex
	mkdir -p output
	ln -fs $< $@

output:
	mkdir -p $@

output/%.run: output/%.hex emulator
	./emulator +max-cycles=$(asm_test_timeout) +coremap-random +loadmem=$< none $(disasm_exe) /dev/null

output/%.out: output/%.hex emulator
	-./emulator +max-cycles=$(asm_test_timeout) $(seed) +verbose +coremap-random +loadmem=$< none $(disasm_exe) $@
#	-./emulator +max-cycles=$(asm_test_timeout) $(seed) +verbose +coremap-random +loadmem=$< none $(disasm_exe) $(patsubst %.out,%.temp,$@)
#	sed -e '/@@@/ !d' -e 's/-.*//g' -e 's/@@@ //' <$(patsubst %.out,%.temp,$@) >$(patsubst %.out,%.commit,$@)
#	sed -e '/@@@/ d' <$(patsubst %.out,%.temp,$@) >$@
#	rm $(patsubst %.out,%.temp,$@)

# Allow some cores to print out a "commit log", prepended with "@@@ ". Can be compared against the Spike ISA simulator.
output/%.vpd: output/%.hex emulator-debug
	-./emulator-debug +max-cycles=$(asm_test_timeout) $(seed) +verbose -v- +coremap-random +loadmem=$< none 2> $(patsubst %.vpd,%.temp,$@) | vcd2vpd - $@ > /dev/null && [ $$PIPESTATUS -eq 0 ]
	sed -e '/@@@/ !d' -e 's/-.*//g' -e 's/@@@ //' <$(patsubst %.vpd,%.temp,$@) >$(patsubst %.vpd,%.commit,$@)
	sed -e '/@@@/ d' <$(patsubst %.vpd,%.temp,$@) >$(patsubst %.vpd,%.out,$@)
	rm $(patsubst %.vpd,%.temp,$@)



ifeq ($(SUPERVISOR_MODE),"false")
 
$(addprefix output/, $(global_bmarks_out)): output/%.riscv.out: emulator output
	./emulator +max-cycles=$(bmark_timeout) +verbose +coremap-random +loadmem=$(global_bmarkdir)/$*.$(filetype) none $(disasm_exe) $@
$(addprefix output/, $(global_bmarks_outgz)): output/%.riscv.out.gz: emulator-debug output
	./emulator +max-cycles=$(bmark_timeout) +verbose -v- +coremap-random $(global_bmarkdir)/$*.$(filetype) none 2>&1 | gzip > $@
$(addprefix output/, $(global_bmarks_vpd)): output/%.riscv.vpd: emulator-debug output
	./emulator-debug +max-cycles=$(bmark_timeout) $(seed) +verbose -v- +coremap-random +loadmem=$(global_bmarkdir)/$*.$(filetype) none 2> $(patsubst %.vpd,%.out,$@) | vcd2vpd - $@ > /dev/null && [ $$PIPESTATUS -eq 0 ]
 
else                                                   

# NO SUPERVISOR MODE TESTS FOR NOW

#$(addprefix output/, $(global_bmarks_out)): output/%.riscv.out: emulator $(PK_HEX) output
#	-$(PK_PATH) ./emulator +max-cycles=$(bmark_timeout) $(seed) +loadmem=$(PK_HEX) none $(global_bmarkdir)/$*.$(filetype) 2> $@
#$(addprefix output/, $(global_bmarks_outgz)): output/%.riscv.out.gz: emulator $(PK_HEX) output
#	$(PK_PATH) ./emulator-debug +max-cycles=$(bmark_timeout) +verbose $(seed) +loadmem=$(PK_HEX) none $(global_bmarkdir)/$*.$(filetype) 2>&1 | gzip > $@
#	$(PK_PATH) ./emulator-debug +max-cycles=$(bmark_timeout) +verbose $(seed) pk $(global_bmarkdir)/$*.$(filetype) 2>&1 | gzip > $@
#$(addprefix output/, $(global_bmarks_vpd)): output/%.riscv.vpd: emulator-debug $(PK_HEX) output
#	-$(PK_PATH) ./emulator-debug +max-cycles=$(bmark_timeout) $(seed) -voutput/$*.riscv.vcd +verbose +loadmem=$(PK_HEX) none $(global_bmarkdir)/$*.$(filetype) 2>&1 | gzip > output/$*.riscv.out.gz; vcd2vpd output/$*.riscv.vcd output/$*.riscv.vpd; rm output/$*.riscv.vcd;
#	-$(PK_PATH) ./emulator-debug +max-cycles=$(bmark_timeout) $(seed) -v- +coremap-random +loadmem=$(PK_HEX) none $(global_bmarkdir)/$*.$(filetype) 2> $(patsubst %.vpd,%.out,$@) | vcd2vpd - $@ > /dev/null
#    
endif

run-asm-tests: $(addprefix output/, $(addsuffix .out, $(global_asm_tests)))
	@echo; perl -ne 'print "  [$$1] $$ARGV \t$$2\n" if /\*{3}(.{8})\*{3}(.*)/' $^; echo;
#run-bmarks-test: $(addprefix output/, $(addsuffix .riscv.out.gz, $(global_bmarks)))
run-bmarks-test: $(addprefix output/, $(addsuffix .riscv.out, $(global_bmarks)))
	-@echo; perl -ne 'print "  [$$1] $$ARGV \t$$2\n" if /\*{3}(.{8})\*{3}(.*)/' $^; echo;
run-asm-tests-debug: $(addprefix output/, $(addsuffix .vpd, $(global_asm_tests)))
	@echo; perl -ne 'print "  [$$1] $$ARGV \t$$2\n" if /\*{3}(.{8})\*{3}(.*)/' $(patsubst %.vpd,%.out,$^); echo;
run-bmarks-test-debug: $(addprefix output/, $(addsuffix .riscv.vpd, $(global_bmarks)))
	@echo; perl -ne 'print "  [$$1] $$ARGV \t$$2\n" if /\*{3}(.{8})\*{3}(.*)/' $(patsubst %.vpd,%.out,$^); echo;


run: run-asm-tests run-bmarks-test
run-debug: run-asm-tests-debug run-bmarks-test-debug
run-fast: $(addprefix output/, $(addsuffix .run, $(global_asm_tests) $(global_bmarks)))

